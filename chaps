CHAPTER 2


import cv2
import numpy as np

# img = cv2.imread("resource/ibrar.PNG")
#
# imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
#
# cv2.imshow("gray image",imgGray)
# cv2.waitKey(0)

# img = cv2.imread("resource/ibrar.PNG")
# #
# # imgGray = cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
# # imgblur=cv2.GaussianBlur(imgGray,(7,7),0)
# # imgcanny=cv2.Canny(img,150,200)
# #
# #
# # cv2.imshow("gray image",imgGray)
# # cv2.imshow("Blur image",imgblur)
# # cv2.imshow("Cannay image",imgcanny)
# # cv2.waitKey(0)

img = cv2.imread("resource/ibrar.PNG")
kernel=np.ones((5,5),np.uint8)
imgGray=cv2.cvtColor(img,cv2.COLOR_BGR2GRAY)
imgblur=cv2.GaussianBlur(imgGray,(7,7),0)
imgcanny=cv2.Canny(img,150,200)
imgdialation=cv2.dilate(imgcanny,kernel,iterations=1)
imgerode=cv2.erode(imgdialation,kernel,iterations=1)

cv2.imshow("gray image",imgGray)
cv2.imshow("Blur image",imgblur)
cv2.imshow("eroded image",imgerode)
cv2.imshow("Cannay image",imgcanny)
cv2.imshow("dialation image",imgdialation)

cv2.waitKey(0)


CHAPTER 3

import cv2
import numpy as np

img =cv2.imread("resources/ibrar.PNG")
print(img.shape)

imgresize=cv2.resize(img,(300,200))

print(img.shape)
imgcropped=img[100:500,200:500]
cv2.imshow("image",img)
cv2.imshow("resize",imgresize)
cv2.imshow("image cropped",imgcropped)
cv2.waitKey(0)

CHAPTER 4

import cv2
import numpy as np

img=np.zeros((512,512,3),np.uint8)



cv2.line(img,(0,0),(img.shape[1],img.shape[0]),(0,255,0),3)
cv2.rectangle(img,(0,0),(250,350),(0,0,255),cv2.FILLED)
cv2.circle(img,(400,100),30,(255,255,0),7)

cv2.putText(img,"opencv",(300,100),cv2.FONT_HERSHEY_COMPLEX,1,(0,150,0),2)
cv2.imshow("image",img)
cv2.waitKey(0)

CHAPTER 5

import cv2
import numpy as np


img=cv2.imread("resources/image.jpg")
width,height=250,350
pts1=np.float32([[111,219],[287,188],[154,482],[352,440]])
pts2=np.float32([[0,0],[width,0],[0,height],[width,height]])

matrix=cv2.getPerspectiveTransform(pts1,pts2)

imgout=cv2.warpPerspective(img,matrix,(width,height))
cv2.imshow("image",img)
cv2.imshow("output",imgout)
cv2.waitKey(0)

CHAPTER 6


import cv2
import numpy as np


def stackImages(scale, imgArray):
    rows = len(imgArray)
    cols = len(imgArray[0])
    rowsAvailable = isinstance(imgArray[0], list)
    width = imgArray[0][0].shape[1]
    height = imgArray[0][0].shape[0]
    if rowsAvailable:
        for x in range(0, rows):
            for y in range(0, cols):
                if imgArray[x][y].shape[:2] == imgArray[0][0].shape[:2]:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (0, 0), None, scale, scale)
                else:
                    imgArray[x][y] = cv2.resize(imgArray[x][y], (imgArray[0][0].shape[1], imgArray[0][0].shape[0]),
                                                None, scale, scale)
                if len(imgArray[x][y].shape) == 2: imgArray[x][y] = cv2.cvtColor(imgArray[x][y], cv2.COLOR_GRAY2BGR)
        imageBlank = np.zeros((height, width, 3), np.uint8)
        hor = [imageBlank] * rows
        hor_con = [imageBlank] * rows
        for x in range(0, rows):
            hor[x] = np.hstack(imgArray[x])
        ver = np.vstack(hor)
    else:
        for x in range(0, rows):
            if imgArray[x].shape[:2] == imgArray[0].shape[:2]:
                imgArray[x] = cv2.resize(imgArray[x], (0, 0), None, scale, scale)
            else:
                imgArray[x] = cv2.resize(imgArray[x], (imgArray[0].shape[1], imgArray[0].shape[0]), None, scale, scale)
            if len(imgArray[x].shape) == 2: imgArray[x] = cv2.cvtColor(imgArray[x], cv2.COLOR_GRAY2BGR)
        hor = np.hstack(imgArray)
        ver = hor
    return ver


img = cv2.imread('Resources/lena.png')
imgGray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)

imgStack = stackImages(0.5, ([img, imgGray, img], [img, img, img]))

# imgHor = np.hstack((img,img))
# imgVer = np.vstack((img,img))
#
# cv2.imshow("Horizontal",imgHor)
# cv2.imshow("Vertical",imgVer)
cv2.imshow("ImageStack", imgStack)

cv2.waitKey(0)


img=cv2.imread("resources/image.jpg")

imgStack=stackImages(0.5,([img,img,img]))


# hor=np.hstack((img,img))
# ver=np.vstack((img,img))
#
#
# cv2.imshow("horizontal",hor)
# cv2.imshow("vert",ver)

cv2.imshow("stack",imgStack)

cv2.waitKey(0)
